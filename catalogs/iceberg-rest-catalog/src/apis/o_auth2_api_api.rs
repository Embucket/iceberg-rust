/*
 * Apache Iceberg REST Catalog API
 *
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`get_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTokenError {
    Status400(models::OAuthError),
    Status401(models::OAuthError),
    Status5XX(models::OAuthError),
    UnknownValue(serde_json::Value),
}

/// The `oauth/tokens` endpoint is **DEPRECATED for REMOVAL**. It is _not_ recommended to implement this endpoint, unless you are fully aware of the potential security implications. All clients are encouraged to explicitly set the configuration property `oauth2-server-uri` to the correct OAuth endpoint. Deprecated since Iceberg (Java) 1.6.0. The endpoint and related types will be removed from this spec in Iceberg (Java) 2.0. See [Security improvements in the Iceberg REST specification](https://github.com/apache/iceberg/issues/10537)  Exchange credentials for a token using the OAuth2 client credentials flow or token exchange.  This endpoint is used for three purposes - 1. To exchange client credentials (client ID and secret) for an access token This uses the client credentials flow. 2. To exchange a client token and an identity token for a more specific access token This uses the token exchange flow. 3. To exchange an access token for one with the same claims and a refreshed expiration period This uses the token exchange flow.  For example, a catalog client may be configured with client credentials from the OAuth2 Authorization flow. This client would exchange its client ID and secret for an access token using the client credentials request with this endpoint (1). Subsequent requests would then use that access token.  Some clients may also handle sessions that have additional user context. These clients would use the token exchange flow to exchange a user token (the \"subject\" token) from the session for a more specific access token for that user, using the catalog's access token as the \"actor\" token (2). The user ID token is the \"subject\" token and can be any token type allowed by the OAuth2 token exchange flow, including a unsecured JWT token with a sub claim. This request should use the catalog's bearer token in the \"Authorization\" header.  Clients may also use the token exchange flow to refresh a token that is about to expire by sending a token exchange request (3). The request's \"subject\" token should be the expiring token. This request should use the subject token in the \"Authorization\" header.
pub async fn get_token(
    configuration: &configuration::Configuration,
    grant_type: Option<&str>,
    scope: Option<&str>,
    client_id: Option<&str>,
    client_secret: Option<&str>,
    requested_token_type: Option<models::TokenType>,
    subject_token: Option<&str>,
    subject_token_type: Option<models::TokenType>,
    actor_token: Option<&str>,
    actor_token_type: Option<models::TokenType>,
) -> Result<models::OAuthTokenResponse, Error<GetTokenError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_grant_type = grant_type;
    let p_scope = scope;
    let p_client_id = client_id;
    let p_client_secret = client_secret;
    let p_requested_token_type = requested_token_type;
    let p_subject_token = subject_token;
    let p_subject_token_type = subject_token_type;
    let p_actor_token = actor_token;
    let p_actor_token_type = actor_token_type;

    let uri_str = format!("{}/v1/oauth/tokens", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref aws_v4_key) = configuration.aws_v4_key {
        let new_headers = match aws_v4_key.sign(&uri_str, "POST", "") {
            Ok(new_headers) => new_headers,
            Err(err) => return Err(Error::AWSV4SignatureError(err)),
        };
        for (name, value) in new_headers.iter() {
            req_builder = req_builder.header(name.as_str(), value.as_str());
        }
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = p_grant_type {
        multipart_form_params.insert("grant_type", param_value.to_string());
    }
    if let Some(param_value) = p_scope {
        multipart_form_params.insert("scope", param_value.to_string());
    }
    if let Some(param_value) = p_client_id {
        multipart_form_params.insert("client_id", param_value.to_string());
    }
    if let Some(param_value) = p_client_secret {
        multipart_form_params.insert("client_secret", param_value.to_string());
    }
    if let Some(param_value) = p_requested_token_type {
        multipart_form_params.insert("requested_token_type", param_value.to_string());
    }
    if let Some(param_value) = p_subject_token {
        multipart_form_params.insert("subject_token", param_value.to_string());
    }
    if let Some(param_value) = p_subject_token_type {
        multipart_form_params.insert("subject_token_type", param_value.to_string());
    }
    if let Some(param_value) = p_actor_token {
        multipart_form_params.insert("actor_token", param_value.to_string());
    }
    if let Some(param_value) = p_actor_token_type {
        multipart_form_params.insert("actor_token_type", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTokenError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
